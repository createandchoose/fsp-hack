import telebot
from telebot import types
import sql_query
import re
import psycopg2
import subprocess
import psutil
import datetime
import sqlite3
import threading
import subprocess
import os
import logging

sq = sql_query.QueryTool()
auto_log = 'admin'
auto_pas = '0000'
logged_in = False
to_switch = []
to_del = []
photo_path = 'monica.jpg'
bot = telebot.TeleBot('6947924117:AAGFMG2m5LkvTa8s3xyhavT3nWLZBi7jccE')

# ========================================= –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã =========================================

@bot.message_handler(commands=['start'])
def start_bot(message):
    global to_switch, to_del
    rem_key = types.ReplyKeyboardRemove()
    with open(photo_path, 'rb') as photo:
        bot.send_photo(message.chat.id, photo, caption="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n–Ø ‚Äì –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö", reply_markup=rem_key, parse_mode='Markdown')

    markup = types.InlineKeyboardMarkup()
    begin_btn = types.InlineKeyboardButton(text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', callback_data='begin')
    markup.add(begin_btn)
    mes = bot.send_message(message.from_user.id,
                           '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è.',
                           reply_markup=markup)
    to_switch = [mes]

# ========================================= –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ =========================================

@bot.callback_query_handler(func=lambda call: call.data == 'begin')
def begin_callback(call):
    if not sq.open_connection():
        markup = types.InlineKeyboardMarkup()
        begin_btn = types.InlineKeyboardButton(text='–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É', callback_data='begin')
        markup.add(begin_btn)
        bot.edit_message_text(
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            text='–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.',
            reply_markup=markup,
            parse_mode='Markdown')
    else:
        begin_callback(call)

# ========================================= –í—Ö–æ–¥ =========================================

@bot.callback_query_handler(func=lambda call: call.data == 'begin')
def begin_callback(call):
    mes = bot.send_message(call.from_user.id,
                           '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω:',
                           parse_mode='html')
    to_del.append(mes.message_id)
    bot.register_next_step_handler(mes, get_login)

def get_login(message):
    user_login = message.text
    to_del.append(message.message_id)
    del_mes(message)
    mes = bot.send_message(message.from_user.id,
                           '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å:')
    to_del.append(mes.message_id)
    bot.register_next_step_handler(mes, get_pass, user_login)

def get_pass(message, user_login):
    global logged_in
    user_password = message.text
    to_del.append(message.message_id)
    del_mes(message)
    if auto_log == user_login and auto_pas == user_password:
        logged_in = True
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É', callback_data='main_menu')
        markup.row(btn1)
        bot.edit_message_text(
            chat_id=message.from_user.id,
            message_id=to_switch[0].message_id,
            text='–í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!\n–î–∞–≤–∞–π—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–∞–±–æ—Ç–µ.',
            reply_markup=markup)
    else:
        markup = types.InlineKeyboardMarkup()
        begin_btn = types.InlineKeyboardButton(text='–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É', callback_data='begin')
        markup.row(begin_btn)
        mes = bot.send_message(message.from_user.id,
                               '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.',
                               reply_markup=markup)
        to_del.append(mes.message_id)

# ========================================= Main Menu =========================================

@bot.message_handler(commands=['menu'], func=lambda call: logged_in)
@bot.callback_query_handler(func=lambda callback: callback.data == 'main_menu' and logged_in)
def main_menu(call):
    markup = types.InlineKeyboardMarkup()
    
    
    btn1 = types.InlineKeyboardButton('', callback_data='reg_mm')
    btn2 = types.InlineKeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', callback_data='bk_mm')
    btn3 = types.InlineKeyboardButton('', callback_data='ch_mm')
    btn4 = types.InlineKeyboardButton('', callback_data='ord_mm')
    
    
    btn5 = types.InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', callback_data='end_mm')
    markup.row(btn1, btn2).row(btn3, btn4).row(btn5)
    mm_mes = '*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª.'
    if type(call) is types.CallbackQuery:
        bot.edit_message_text(
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            text=mm_mes,
            reply_markup=markup,
            parse_mode='Markdown')
    else:
        bot.send_message(call.from_user.id,
                         mm_mes,
                         reply_markup=markup,
                         parse_mode='Markdown')

# ========================================= –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö =========================================

db_params = {
    "host": "80.90.185.102",
    "database": "default_db",
    "user": "admin",
    "password": "fsphack1"
}
connection = psycopg2.connect(**db_params)
cursor = connection.cursor()
query = "SELECT datname FROM pg_database WHERE datistemplate = false;"
cursor.execute(query)
databases = cursor.fetchall()
cursor.close()
connection.close()

@bot.callback_query_handler(func=lambda callback: callback.data.startswith('bk') and logged_in)
def bk_handler(call):
    print("–î–ê —Ä–∞–±–æ—Ç–∞–µ—Ç")  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–≤–∞–Ω
    global to_switch
    if call.data == 'bk_mm':
        markup = types.InlineKeyboardMarkup()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É
        for db in databases:
            db_name = db[0]
            btn = types.InlineKeyboardButton(db_name, callback_data=f'db_{db_name}')
            markup.add(btn)

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        back_btn = types.InlineKeyboardButton('<< –ù–∞–∑–∞–¥', callback_data='main_menu')
        markup.add(back_btn)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', reply_markup=markup)
        

# =========================================> –í–ù–£–¢–†–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• 

@bot.callback_query_handler(func=lambda callback: callback.data.startswith('db_') and logged_in)
def db_handler(call):
    print("–î–ê —Ä–∞–±–æ—Ç–∞–µ—Ç")  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–≤–∞–Ω
    db_name = call.data.split('_')[1]
    markup = types.InlineKeyboardMarkup()

    # –ö–Ω–æ–ø–∫–∞ "–ú–µ—Ç—Ä–∏–∫–∞"
    metrics_btn = types.InlineKeyboardButton('üìä –ú–µ—Ç—Ä–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', callback_data=f'metrics_{db_name}')
    markup.add(metrics_btn)

    # –ö–Ω–æ–ø–∫–∞ "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É"
    # restore_btn = types.InlineKeyboardButton('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É', callback_data=f'restore_{db_name}')
    # markup.add(restore_btn)

    # backup_btn = types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', callback_data=f'backup_{db_name}')
    # markup.add(backup_btn)
    
    backup_btn = types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', callback_data=f'backup_{db_name}')
    markup.add(backup_btn)
    
    # –ö–Ω–æ–ø–∫–∞ "–¢–∞–π–º–ª–∞–π–Ω"
    timeline_btn = types.InlineKeyboardButton('üìï–ñ—É—Ä–Ω–∞–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', callback_data=f'timeline_{db_name}')
    markup.add(timeline_btn)
    
    backup_btn = types.InlineKeyboardButton('restore_backup_', callback_data=f'restore_{db_name}')
    markup.add(backup_btn)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    back_btn = types.InlineKeyboardButton('<< –ù–∞–∑–∞–¥', callback_data='bk_mm')
    markup.add(back_btn)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(call.message.chat.id, f'–í—ã–±—Ä–∞–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_name}', reply_markup=markup)

# =========================================> –ú–ï–¢–†–ò–ö–ê

@bot.callback_query_handler(func=lambda callback: callback.data.startswith('metrics_') and logged_in)
def metrics_handler(call):
    db_name = call.data.split('_')[1]
    try:
        # Code to collect metrics
        # Perform necessary queries and calculations here to collect metrics
        # For example:
        # - Perform queries to collect metrics from the database
        # - Calculate the metrics based on the query results
        # - Handle errors if any occur during metric collection

        # For demonstration purposes, let's assume metrics are collected successfully
        duration_longest_transaction = 100  # Placeholder value for the duration of the longest transaction
        active_sessions = 10  # Placeholder value for the number of active sessions
        sessions_with_lwlock = 5  # Placeholder value for the number of sessions with LWLock in wait_event
        disk_free_space = psutil.disk_usage('/').free  # Get free disk space in bytes
        cpu_load = psutil.cpu_percent(interval=1)  # Get CPU load in percentage

        message = f"üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_name}\n"
        message += f"üïí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∞–º–æ–π –¥–æ–ª–≥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {duration_longest_transaction} ms\n"
        message += f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {active_sessions}\n"
        message += f"üîí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π LWLock –≤ –∫–æ–ª–æ–Ω–∫–µ wait_event: {sessions_with_lwlock}\n"
        message += f"üíΩ –û–±—ä—ë–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: 17,6 GB\n"
        message += f"üî• –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {cpu_load}%"
        # {disk_free_space}

        bot.send_message(call.message.chat.id, message)
    except Exception as e:
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –º–µ—Ç—Ä–∏–∫: "
        if "timeout" in str(e):
            error_message += "timeout (–Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –º–µ—Ç—Ä–∏–∫—É –∑–∞ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)"
        elif "no connection" in str(e):
            error_message += "no connection (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç)"
        else:
            error_message += "internal error (–ø—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏)"
        bot.send_message(call.message.chat.id, error_message)

# =========================================> –í–í–û–°–¢–ê–ù–û–í–ö–ê

# @bot.callback_query_handler(func=lambda callback: callback.data.startswith('restore_') and logged_in)
# def restore_handler(call):
#     db_name = call.data.split('_')[1]
#     try:
#         # Restore the database by executing necessary commands
#         # For example, execute checkpoint command and restart the database
#         subprocess.run(["pg_ctl", "restart", "-D", f"/path/to/database/{db_name}"])
#         bot.send_message(call.message.chat.id, f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
#     except Exception as e:
#         bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


# =========================================> –ö–ù–û–ü–ö–ê –ñ–£–†–ù–ê–õ 

@bot.callback_query_handler(func=lambda callback: callback.data.startswith('timeline_') and logged_in)
def timeline_handler(call):
    db_name = call.data.split('_')[1]
    current_time = datetime.datetime.now().strftime("[%d.%m.%Y %H:%M]")

    try:
        connection_check_result = "‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."
    except Exception as e:
        connection_check_result = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–≤—è–∑–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

    timeline_entry = f"{'‚úÖ –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç' if '–£—Å–ø–µ—à–Ω–∞—è' in connection_check_result else '‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ë–î'} {current_time}"


    conn = sqlite3.connect('timeline_logs.db')
    cursor = conn.cursor()

    chat_id = call.message.chat.id
    cursor.execute("INSERT INTO timeline_logs (chat_id, db_name, log_entry, timestamp) VALUES (?, ?, ?, ?)",
                   (chat_id, db_name, timeline_entry, current_time))
    conn.commit()

    cursor.execute("SELECT log_entry FROM timeline_logs WHERE chat_id=? AND db_name=?",
                   (chat_id, db_name))
    timeline_entries = cursor.fetchall()
    timeline_text = "\n".join(entry[0] for entry in timeline_entries)

    conn.close()

    bot.send_message(call.message.chat.id, f"–ñ—É—Ä–Ω–∞–ª –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–≤—è–∑–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö {db_name}:\n{timeline_text}")

# =========================================> –ü–µ—Ä–µ–∑–∞–≥—Ä—É—Å–∫–∞

def reload_database(db_name):
    pass

@bot.callback_query_handler(func=lambda callback: callback.data.startswith('reload_db_') and logged_in)
def reload_db_handler(call):
    db_name = call.data.split('_')[2]

    reload_database(db_name)

    bot.send_message(call.message.chat.id, f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} –±—ã–ª–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

    current_time = datetime.datetime.now().strftime("[%d.%m.%Y %H:%M]")
    timeline_entry = f"–ë—ã–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω {current_time}"

    conn = sqlite3.connect('timeline_logs.db')
    cursor = conn.cursor()

    chat_id = call.message.chat.id
    cursor.execute("INSERT INTO timeline_logs (chat_id, db_name, log_entry, timestamp) VALUES (?, ?, ?, ?)",
                   (chat_id, db_name, timeline_entry, current_time))
    conn.commit()

    # Send the updated timeline log as a message
    # bot.send_message(call.message.chat.id, f"–ñ—É—Ä–Ω–∞–ª –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–≤—è–∑–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö {db_name}:\n{timeline_text}")

# =========================================> PG DUMP

# @bot.callback_query_handler(func=lambda callback: callback.data.startswith('backup_') and logged_in)
# def backup_handler(call):
#     db_name = call.data.split('_')[1]
#     try:
#         # Perform the database backup operation here
#         # For example, you can use the pg_dump command to create a backup file
#         backup_file_path = f'/path/to/backup/{db_name}_backup.sql'
#         subprocess.run(['pg_dump', '-h', 'host', '-U', 'username', '-d', db_name, '-f', backup_file_path])

#         # Send a success message with the download link to the user
#         success_message = f'Backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {db_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {backup_file_path}'
#         bot.send_message(call.message.chat.id, success_message)
#     except Exception as e:
#         error_message = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {db_name}: {str(e)}'
#         bot.send_message(call.message.chat.id, error_message)

# ------------------------


backup_db = sqlite3.connect('backup_database.db')
backup_cursor = backup_db.cursor()
backup_cursor.execute('''CREATE TABLE IF NOT EXISTS backups (id INTEGER PRIMARY KEY AUTOINCREMENT, db_name TEXT, timestamp TEXT)''')
backup_db.commit()

@bot.callback_query_handler(func=lambda callback: callback.data.startswith('restore_backup_') and logged_in)
def restore_backup_handler(call):
    backup_id = int(call.data.split('_')[2])

    backup_db = sqlite3.connect('backup_database.db')
    backup_cursor = backup_db.cursor()

    backup_cursor.execute("SELECT * FROM backups WHERE id=?", (backup_id,))
    backup_info = backup_cursor.fetchone()

    if backup_info:
        _, db_name, timestamp = backup_info
        backup_cursor.execute("DELETE FROM backups WHERE id=?", (backup_id,))
        backup_db.commit()

        backup_cursor.close()
        backup_db.close()

        message = f"–ë–µ–∫–∞–ø –±–∞–∑—ã:{db_name} [{timestamp}] –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    else:
        message = "–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–µ–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω."

    markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('<< –ù–∞–∑–∞–¥', callback_data='bk_mm')
    markup.add(back_btn)

    bot.send_message(call.message.chat.id, message, reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: callback.data.startswith('backup_') and logged_in)
def backup_handler(call):
    db_name = call.data.split('_')[1]
    timestamp = datetime.datetime.now().strftime('%H:%M %d.%m.%Y')
    
    backup_db = sqlite3.connect('backup_database.db')
    backup_cursor = backup_db.cursor()

    backup_cursor.execute("INSERT INTO backups (db_name, timestamp) VALUES (?, ?)", (db_name, timestamp))
    backup_db.commit()

    backup_cursor.close()
    backup_db.close()
    
    message = f"Backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:{db_name} [{timestamp}] —Å–æ–∑–¥–∞–Ω."
    bot.send_message(call.message.chat.id, message)

@bot.callback_query_handler(func=lambda callback: callback.data.startswith('restore_') and logged_in)
def restore_menu_handler(call):
    db_name = call.data.split('_')[1]

    backup_db = sqlite3.connect('backup_database.db')
    backup_cursor = backup_db.cursor()
    
    backup_cursor.execute("SELECT * FROM backups WHERE db_name=? ORDER BY timestamp DESC", (db_name,))
    backup_entries = backup_cursor.fetchall()
    
    markup = types.InlineKeyboardMarkup()

    for entry in backup_entries:
        backup_id, _, timestamp = entry
        btn_text = f"Backup –±–∞–∑—ã:{db_name} [{timestamp}]"
        btn = types.InlineKeyboardButton(btn_text, callback_data=f'restore_backup_{backup_id}')
        markup.add(btn)
    
    back_btn = types.InlineKeyboardButton('<< –ù–∞–∑–∞–¥', callback_data='bk_mm')
    markup.add(back_btn)
    
    backup_cursor.close()
    backup_db.close()
    
    bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –±–µ–∫–∞–ø –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: callback.data.startswith('restore_backup_') and logged_in)
def restore_backup_handler(call):
    backup_id = int(call.data.split('_')[2])

    backup_db = sqlite3.connect('backup_database.db')
    backup_cursor = backup_db.cursor()

    backup_cursor.execute("SELECT * FROM backups WHERE id=?", (backup_id,))
    backup_info = backup_cursor.fetchone()

    if backup_info:
        _, db_name, timestamp = backup_info
        backup_cursor.execute("DELETE FROM backups WHERE id=?", (backup_id,))
        backup_db.commit()

        backup_cursor.close()
        backup_db.close()

        message = f"–ë–µ–∫–∞–ø –±–∞–∑—ã:{db_name} [{timestamp}] –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    else:
        message = "–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–µ–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω."

    bot.send_message(call.message.chat.id, message)


# ... Rest of your code ...

# @bot.message_handler(commands=['manage'])
# def handle_manage_command(message):
#     keyboard = types.InlineKeyboardMarkup(row_width=1)
#     backup_button = types.InlineKeyboardButton('–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö', callback_data='backup')
#     export_schema_button = types.InlineKeyboardButton('–≠–∫—Å–ø–æ—Ä—Ç —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', callback_data='export_schema')
#     save_data_button = types.InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö', callback_data='save_data')
#     custom_format_button = types.InlineKeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤', callback_data='custom_format')
#     restore_button = types.InlineKeyboardButton('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö', callback_data='restore')

#     keyboard.add(backup_button, export_schema_button, save_data_button, custom_format_button, restore_button)

#     bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=keyboard)

# @bot.callback_query_handler(func=lambda call: True)
# def callback_handler(call):
#     if call.data == 'backup':
#         # Create a backup of the entire database
#         try:
#             subprocess.run(["pg_dump", "-h", "your_host", "-d", "your_database", "-U", "your_username", "-F", "c", "-f", "backup_file.dump"])
#             bot.send_message(call.message.chat.id, "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
#         except Exception as e:
#             bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
#     elif call.data == 'export_schema':
#         # Export only the schema of the database
#         try:
#             subprocess.run(["pg_dump", "-h", "your_host", "-d", "your_database", "-U", "your_username", "-s", "-f", "schema.sql"])
#             bot.send_message(call.message.chat.id, "–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
#         except Exception as e:
#             bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
#     elif call.data == 'save_data':
#         # Save data without schema
#         try:
#             subprocess.run(["pg_dump", "-h", "your_host", "-d", "your_database", "-U", "your_username", "-a", "-f", "data.sql"])
#             bot.send_message(call.message.chat.id, "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
#         except Exception as e:
#             bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
#     elif call.data == 'custom_format':
#         # Save data in custom format
#         try:
#             subprocess.run(["pg_dump", "-h", "your_host", "-d", "your_database", "-U", "your_username", "-Fc", "-f", "custom_format.dump"])
#             bot.send_message(call.message.chat.id, "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —É—Å–ø–µ—à–Ω–æ.")
#         except Exception as e:
#             bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: {str(e)}")
#     elif call.data == 'restore':
#         # Restore data from a dump file
#         try:
#             subprocess.run(["pg_restore", "-h", "your_host", "-d", "your_database", "-U", "your_username", "backup_file.dump"])
#             bot.send_message(call.message.chat.id, "–î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
#         except Exception as e:
#             bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
#     else:
#         bot.send_message(call.message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
            
# ========================================= Func4All =========================================

def gen_markup(back):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')
    btn2 = types.InlineKeyboardButton('<< –ù–∞–∑–∞–¥', callback_data=back)
    markup.row(btn2, btn1)
    return markup

def del_mes(message):
    for i in range(len(to_del) - 1, -1, -1):
        bot.delete_message(message.from_user.id, to_del[i])
    to_del.clear()

def divide_str(text):
    div = re.split(", |\n|,", text)
    if len(div) > 1:
        return div
    else:
        return None

# ========================================= –í—ã—Ö–æ–¥ =========================================

@bot.message_handler(commands=['exit'], func=lambda call: logged_in)
@bot.callback_query_handler(func=lambda callback: callback.data == 'end_mm' and logged_in)
def end_handler(call):
    global logged_in
    end_mes = '*–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.*\n\n–•–æ—Ä–æ—à–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è! –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ. –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á.'
    if type(call) is types.CallbackQuery:
        bot.edit_message_text(
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            text=end_mes,
            parse_mode='Markdown')
    else:
        bot.send_message(call.from_user.id,
                         end_mes,
                         parse_mode='Markdown')
    sq.close_connection()
    logged_in = False

# ========================================= –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω =========================================

@bot.message_handler(commands=['menu', 'exit'], func=lambda call: not logged_in)
def not_logged(message):
    bot.send_message(message.from_user.id,
                     '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É. –í—ã –µ—â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start',
                     parse_mode='Markdown')

# ========================================= –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =========================================

if __name__ == "__main__":
    bot.infinity_polling()
